version: '3'

# 生产环境建议不要 host 模式

services:
  gateway:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/gateway:${CLOUD_DEPOSITORY_TAG}
    container_name: gateway
    network_mode: host
    command: sh -c "/wait && java ${GATEWAY_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${GATEWAY_MAIN_CLASS}"
    environment:
      WAIT_HOSTS: ${NACOS_HOST}:${PORT_SERVER_SYSTEM}
      WAIT_SLEEP_INTERVAL: ${DOCKER_WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${DOCKER_WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_TIMEOUT: ${DOCKER_WAIT_TIMEOUT}
    volumes:
      - ./log/gateway:/log/gateway
      - ./log/gateway/skywalking:/agent/logs
      - ${CLOUD_AGENT_CONFIG}
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_GATEWAY} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  auth:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/auth:${CLOUD_DEPOSITORY_TAG}
    container_name: auth
    network_mode: host
    command: sh -c "java ${AUTH_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${AUTH_MAIN_CLASS}"
    volumes:
      - ./log/auth:/log/auth
      - ./log/auth/skywalking:/agent/logs
      - ${CLOUD_AGENT_CONFIG}
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_AUTH} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  knife4j:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/knife4j:${CLOUD_DEPOSITORY_TAG}
    container_name: knife4j
    network_mode: host
    command: sh -c "/wait && java ${SERVER_KNIFE4J_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${KNIFE4J_MAIN_CLASS}"
    environment:
      WAIT_HOSTS: ${NACOS_HOST}:${PORT_GATEWAY}, ${NACOS_HOST}:${PORT_AUTH}, ${NACOS_HOST}:${PORT_SERVER_SYSTEM}, ${NACOS_HOST}:${PORT_SERVER_DICT}, ${NACOS_HOST}:${PORT_SERVER_MINIO}, ${NACOS_HOST}:${PORT_SERVER_TEST}
      WAIT_SLEEP_INTERVAL: ${DOCKER_WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${DOCKER_WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_TIMEOUT: ${DOCKER_WAIT_TIMEOUT}
    volumes:
      - ./log/knife4j:/log/knife4j
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_KNIFE4J} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  server-system:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/server-system:${CLOUD_DEPOSITORY_TAG}
    container_name: server-system
    network_mode: host
    command: sh -c "/wait && java ${SERVER_SYSTEM_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${SERVER_SYSTEM_MAIN_CLASS}"
    environment:
      WAIT_HOSTS: ${NACOS_HOST}:${SEATA_PORT}
      WAIT_SLEEP_INTERVAL: ${DOCKER_WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${DOCKER_WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_TIMEOUT: ${DOCKER_WAIT_TIMEOUT}
    volumes:
      - ./log/server-system:/log/server-system
      - ./log/server-system/skywalking:/agent/logs
      - ${CLOUD_AGENT_CONFIG}
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_SERVER_SYSTEM} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  # 生产可以不用部署
  server-generator:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/server-generator:${CLOUD_DEPOSITORY_TAG}
    container_name: server-generator
    network_mode: host
    command: sh -c "/wait && java ${SERVER_GENERATOR_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${SERVER_GENERATOR_MAIN_CLASS}"
    environment:
      WAIT_HOSTS: ${NACOS_HOST}:${SEATA_PORT}, ${NACOS_HOST}:${PORT_SERVER_SYSTEM}
      WAIT_SLEEP_INTERVAL: ${DOCKER_WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${DOCKER_WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_TIMEOUT: ${DOCKER_WAIT_TIMEOUT}
    volumes:
      - ./log/server-generator:/log/server-generator
      - ./log/server-generator/skywalking:/agent/logs
      - ${CLOUD_AGENT_CONFIG}
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_SERVER_GENERATOR} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  server-dict:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/server-dict:${CLOUD_DEPOSITORY_TAG}
    container_name: server-dict
    network_mode: host
    command: sh -c "/wait && java ${SERVER_DICT_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${SERVER_DICT_MAIN_CLASS}"
    environment:
      WAIT_HOSTS: ${NACOS_HOST}:${SEATA_PORT}
      WAIT_SLEEP_INTERVAL: ${DOCKER_WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${DOCKER_WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_TIMEOUT: ${DOCKER_WAIT_TIMEOUT}
    volumes:
      - ./log/server-dict:/log/server-dict
      - ./log/server-dict/skywalking:/agent/logs
      - ${CLOUD_AGENT_CONFIG}
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_SERVER_DICT} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  server-minio:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/server-minio:${CLOUD_DEPOSITORY_TAG}
    container_name: server-minio
    network_mode: host
    command: sh -c "/wait && java ${SERVER_MINIO_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${SERVER_MINIO_MAIN_CLASS}"
    environment:
      WAIT_HOSTS: ${NACOS_HOST}:${SEATA_PORT}
      WAIT_SLEEP_INTERVAL: ${DOCKER_WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${DOCKER_WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_TIMEOUT: ${DOCKER_WAIT_TIMEOUT}
    volumes:
      - ./log/server-minio:/log/server-minio
      - ./log/server-minio/skywalking:/agent/logs
      - ${CLOUD_AGENT_CONFIG}
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_SERVER_MINIO} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  # 生产可以不用部署
  server-test:
    image: ${CLOUD_DEPOSITORY_IP_PORT}${CLOUD_DEPOSITORY_URL}/server-test:${CLOUD_DEPOSITORY_TAG}
    container_name: server-test
    network_mode: host
    command: sh -c "/wait && java ${SERVER_TEST_JAVA_OPS} -cp /app/resources:/app/classes:/app/libs/* ${SERVER_TEST_MAIN_CLASS}"
    environment:
      WAIT_HOSTS: ${NACOS_HOST}:${SEATA_PORT}
      WAIT_SLEEP_INTERVAL: ${DOCKER_WAIT_SLEEP_INTERVAL}
      WAIT_HOST_CONNECT_TIMEOUT: ${DOCKER_WAIT_HOST_CONNECT_TIMEOUT}
      WAIT_TIMEOUT: ${DOCKER_WAIT_TIMEOUT}
    volumes:
      - ./log/server-test:/log/server-test
      - ./log/server-test/skywalking:/agent/logs
      - ${CLOUD_AGENT_CONFIG}
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${PORT_SERVER_TEST} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
  seata:
    image: ${CLOUD_DEPOSITORY_IP_PORT}/library/seata:1.4.2
    container_name: seata
    network_mode: host
    environment:
      # 指定seata服务启动端口
      - SEATA_PORT=${SEATA_PORT}
      # 注册到nacos上的ip。客户端将通过该ip访问seata服务。
      # 注意公网ip和内网ip的差异。
      - SEATA_IP=${NACOS_DISCOVERY_IP}
      - SEATA_CONFIG_NAME=file:/root/seata-config/registry
    volumes:
      # 因为registry.conf中是nacos配置中心，只需要把registry.conf放到./seata/config文件夹中
      - ./seata/config:/root/seata-config
    healthcheck:
      test: [ "CMD-SHELL", "curl -sS ${NACOS_HOST}:${SEATA_PORT} || exit 1" ]
      interval: ${DOCKER_HEALTHCHECK_INTERVAL}
      timeout: ${DOCKER_HEALTHCHECK_TIMEOUT}
      retries: ${DOCKER_HEALTHCHECK_RETRIES}
    env_file: .env
